{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Introduction\r\n\r\nKJSencha is a Zend Framework 2 module which is meant to ease the PHP development when working with the Ext-JS or Sencha Touch framework.\r\n\r\nThis module is based on [KJExtJS](https://github.com/KablauJoustra/KJExtJS) and is meant as a shared functionality module for future KJSenchaTouch, KJExtJS and KJExtScheduler modules.\r\n\r\n## Dependencies\r\n\r\n* Doctrine Common, for annotation support\r\n* Zend Framework 2\r\n\r\n# Installation of KJSencha\r\n\r\n## Download\r\nYou can install this module via [composer](https://getcomposer.org/) by running the following\r\ncommand in your application's root directory:\r\n\r\n```sh\r\n$ ./composer.phar require kablau-joustra/kj-sencha\r\n```\r\n\r\n## Enabling\r\nTo enable KJSencha, open your `config/application.config.php` file and add following items\r\nto the `modules` key:\r\n\r\n```php\r\n\"AssetManager\",\r\n\"KJSencha\",\r\n```\r\n\r\n## View\r\n\r\nIn your view (presumably `module/Application/view/application/index/index.phtml`), add\r\nfollowing code (may also be your layout if you prefer so). Those add scripts and css to your\r\npage's head tag:\r\n\r\n```php\r\n<?php\r\n// first, add extJs to head scripts\r\n$this->extJs()->loadLibrary();\r\n\r\n// load custom variables set in configuration\r\n$this->kjSenchaVariables();\r\n\r\n// add loader configuration, which tells where ExtJs classes have to be loaded from\r\n$this->kjSenchaLoaderConfig();\r\n\r\n// preloads modules required to get the app running\r\n$this->kjSenchaDirectApi();\r\n\r\n// loads your actual application script (usually at the end of your body tag)\r\n$this->inlineScript()->appendFile($this->basepath() . '/js/app/app.js');\r\n```\r\n\r\n## app.js\r\n\r\nNow create a new file in `public/js/app/app.js`:\r\n\r\n```js\r\n/**\r\n * KJSencha Example Application\r\n *\r\n * @see http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture\r\n */\r\nExt.application({\r\n    name: 'YourAppName',\r\n    // this variable is inherited from the output of view helper `kjSenchaVariables`\r\n    appFolder: App.basePath + '/js/app',\r\n\r\n    launch: function() {\r\n        var name = prompt(\"Please enter your name\", \"user\");\r\n        KJSencha.echo.greet(name, function(response) {\r\n            alert(response);\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n## Verifying it\r\n\r\nYou can now browse to your web page. You should be asked for your name and receive a\r\nresponse computed by the server.\r\n\r\n## Configuration\r\n\r\nThe module itself is just a map of services to be exposed as JS API through\r\n[Ext Direct](http://www.sencha.com/products/extjs/extdirect) via\r\n[`Ext.direct.Manager`](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.direct.Manager).\r\n\r\nMapping services happens via config key `kjsencha.direct.services`:\r\n\r\n```php\r\n// MyModule/Module.php\r\nnamespace MyModule;\r\n\r\nclass Module\r\n{\r\n    public function getConfig()\r\n    {\r\n        return array(\r\n            'kjsencha' => array(\r\n                'direct' => array(\r\n                    'services' => array(\r\n                        'My.cool.service.name' => 'my_servicemanager_service_name',\r\n                        'My.other.ServiceName' => 'my_object_repository',\r\n                    ),\r\n                ),\r\n            ),\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nThis example exposes two services, `My.cool.service.name` and `My.other.ServiceName`.\r\nPublic methods of those services can be used in your JS.\r\n\r\nParameters and return types must be one of `string`, `bool`, `int`, `float`, `double` and\r\n`array`s, with arrays being able to contain any of those (type hinting is not yet supported).\r\n\r\nPlease be careful about exposed functionality, since any public method in the exposed\r\nobjects will be available to the user.\r\n\r\n## Caching\r\n\r\nCrawling mapped services and building API definitions to be exposed to the `\r\nExt.direct.Manager` is a very expensive operation that causes all of the mapped services\r\nto be initialized and crawled via reflection/tokenizers. You may want to enable caching by\r\ndefining (in your config) `kjsencha.cache`. `kjsencha.cache` may be any array or traversable\r\nthat could be passed to\r\n[`Zend\\Cache\\StorageFactory::factory()`](http://framework.zend.com/manual/2.0/en/modules/zend.cache.storage.adapter.html)\r\n\r\n## Configuration\r\n\r\nSee [[Configuration]]","name":"Kjsencha","google":"","tagline":"Ext-JS / Sencha Touch Intergration Module for Zend Framework 2"}